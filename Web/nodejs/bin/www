#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('reko:server');
var http = require('http');
let request = require('request');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


let MongoClient = require('mongodb').MongoClient;

let uri = "mongodb+srv://poppro:reko123@reko-no8a0.gcp.mongodb.net/";


let io = require('socket.io')(server);

io.sockets.on('connection', function (socket) {
    console.log('Connection');
    let id = socket.id;
    //console.log(io.sockets.connected[id]);
    socket.on('push card', function (data) {
        MongoClient.connect(uri, function(err, client) {
            if(!err) {
                const db = client.db('reko');
                db.collection("users", function(err, collection){
                    if(!err) {
                        collection.findOne({"user": data.user}, function(err, item) {
                            socket.broadcast.emit('new_card', {card: item.cards[data.card]});
                        });
                    } else {
                        console.log(err);
                    }
                });
                client.close();
            } else {
                console.log(err);
            }
        });
    }).on('login', function(data) {
        console.log('Logged in: ' + data.user);
        MongoClient.connect(uri, function(err, client) {
            if(!err) {
                const db = client.db('reko');
                db.collection("users", function(err, collection){
                    if(!err) {
                        collection.findOne({"user": data.user}, function(err, item) {
                            socket.emit('card stack', {card: item.cards});
                        });
                    } else {
                        console.log(err);
                    }
                });
                client.close();
            } else {
                console.log(err);
            }
        });
    }).on('register_impression', function(data) {
        console.log(data);

        MongoClient.connect(uri, function(err, client) {
            if (!err) {
                const db = client.db('reko');
                db.collection("users", function (err, collection) {
                    if (!err) {
                        let str = data.type.toLowerCase();
                        let upd2 = {};
                        upd2[str] = data.impressed;
                        let upd = {$set: upd2};
                        collection.updateOne({user: 'poppro'}, upd, function(err, res) {
                            if (err) throw err;
                            console.log("1 document updated");
                        });

                        collection.findOne({"user": "poppro"}, function(err, item) {
                            console.log(item);
                        });
                    } else {
                        console.log(err);
                    }
                client.close();
                });
            } else {
                console.log(err);
            }
        });

    }).on('send_stats', function(data) {
        socket.broadcast.emit('display_stats', {});
    }).on('start_session', function(data) {
        socket.broadcast.emit('start_session', {});
    }).on('end_session', function(data) {
        socket.broadcast.emit('end_session', {});
        request.post({
            json: { student_id: 'poppro',
                    recruiter_id: 'brian'},
            headers: {'content-type' : 'application/json'},
            url:     'https://reko.serveo.net/jobMatch/',
        }, function(error, response, body){
            body.student_stats.jobMatchProb = parseInt(body.student_stats.jobMatchProb);
            Object.keys(body.student_stats).forEach(function(el) {
                if(el.key !== 'jobMatchProb') {
                    el.s = parseInt(el.s);
                    el.a = parseInt(el.a);
                }
            });
            console.log(body.student_stats);
            io.emit('stats', {employment: body.student_stats});
        });
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
